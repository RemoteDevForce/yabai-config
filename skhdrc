i# ################################################################ #
# THE FOLLOWING IS AN EXPLANATION OF THE GRAMMAR THAT SKHD PARSES. #
# FOR SIMPLE EXAMPLE MAPPINGS LOOK FURTHER DOWN THIS FILE..        #
# ################################################################ #

# https://github.com/koekeishiya/yabai/blob/master/doc/yabai.asciidoc
 
# A list of all built-in modifier and literal keywords can
# be found at https://github.com/koekeishiya/skhd/issues/1
#
# A hotkey is written according to the following rules:
#
#   hotkey       = <mode> '<' <action> | <action>
#
#   mode         = 'name of mode' | <mode> ',' <mode>
#
#   action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                  <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                  <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#   keysym       = <mod> '-' <key> | <key>
#
#   mod          = 'modifier keyword' | <mod> '+' <mod>
#
#   key          = <literal> | <keycode>
#
#   literal      = 'single letter or built-in keyword'
#
#   keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
#
#   proc_map_lst = * <proc_map>
#
#   proc_map     = <string> ':' <command> | <string>     '~' |
#                  '*'      ':' <command> | '*'          '~'
#
#   string       = '"' 'sequence of characters' '"'
#
#   command      = command is executed through '$SHELL -c' and
#                  follows valid shell syntax. if the $SHELL environment
#                  variable is not set, it will default to '/bin/bash'.
#                  when bash is used, the ';' delimeter can be specified
#                  to chain commands.
#
#                  to allow a command to extend into multiple lines,
#                  prepend '\' at the end of the previous line.
#
#                  an EOL character signifies the end of the bind.
#
#   ->           = keypress is not consumed by skhd
#
#   *            = matches every application not specified in <proc_map_lst>
#
#   ~            = application is unbound and keypress is forwarded per usual, when specified in a <proc_map>
#
# A mode is declared according to the following rules:
#
#   mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#               '::' <name> '@'               | '::' <name>
#
#   name      = desired name for this mode,
#
#   @         = capture keypresses regardless of being bound to an action
#
#   command   = command is executed through '$SHELL -c' and
#               follows valid shell syntax. if the $SHELL environment
#               variable is not set, it will default to '/bin/bash'.
#               when bash is used, the ';' delimeter can be specified
#               to chain commands.
#
#               to allow a command to extend into multiple lines,
#               prepend '\' at the end of the previous line.
#
#               an EOL character signifies the end of the bind.

# If you're having troubles finding key codes for a key just type skhd --observe in a terminal and type a key. Pretty cool! Or just check the wiki.

## HYPER == SHIFT + CMD + ALT + OPTION

## Quickly restart the yabai launch agent
ctrl + alt + cmd - r : launchctl kickstart -k "gui/${UID}/homebrew.mxcl.yabai"

## rotate tree 90
hyper - r : yabai -m space --rotate 90

## flip the tree vertically
hyper - 4 : yabai -m space --mirror y-axis
## mirror tree x-axis
hyper - 5 : yabai -m space --mirror x-axis

## toggle window fullscreen zoom
hyper - space : yabai -m window --toggle zoom-fullscreen
# toggle window zoom
hyper - v : yabai -m window --toggle zoom-parent

# focus window
hyper - j : yabai -m window --focus west
hyper - l : yabai -m window --focus east
hyper - i : yabai -m window --focus north
hyper - k : yabai -m window --focus south

# swap managed window
hyper - e : yabai -m window --swap north
hyper - f : yabai -m window --swap east
hyper - d : yabai -m window --swap west
hyper - c : yabai -m window --swap south 

# move managed window
hyper - w : yabai -m window --warp north
hyper - a : yabai -m window --warp west
hyper - s : yabai -m window --warp east
hyper - x : yabai -m window --warp south

# balance size of windows
hyper - 0 : yabai -m space --balance

# send window to space (won't follow due to SIP)
ctrl + cmd - 0x2F : yabai -m window --space next
ctrl + cmd - 0x2B : yabai -m window --space prev
#shift + cmd - 2 : yabai -m window --space  2; yabai -m space --focus 2

# focus monitor (not windows)
ctrl + alt - 0x2B  : yabai -m display --focus prev # <
ctrl + alt - 0x2F  : yabai -m display --focus next # >
ctrl + alt - 1  : yabai -m display --focus 3
ctrl + alt - 2  : yabai -m display --focus 1
ctrl + alt - 3  : yabai -m display --focus 2

# send window to monitor and follow focus
#ctrl + cmd - c  : yabai -m window --display next; yabai -m display --focus next
hyper - 1  : yabai -m window --display 3; yabai -m display --focus 3
hyper - 2  : yabai -m window --display 1; yabai -m display --focus 1
hyper - 3  : yabai -m window --display 2; yabai -m display --focus 2

# move floating window
shift + ctrl - a : yabai -m window --move rel:-20:0
shift + ctrl - d : yabai -m window --move rel:20:0
shift + ctrl - w : yabai -m window --move rel:0:-20
shift + ctrl - s : yabai -m window --move rel:0:20

# make floating window fill screen
shift + ctrl - z : yabai -m window --grid 1:1:0:0:1:1

# make floating window fill left-half of screen
shift + ctrl - q : yabai -m window --grid 1:2:0:0:1:1

# window sizes
shift + alt - a : yabai -m window --resize left:-20:0
shift + alt - f : yabai -m window --resize right:20:0
shift + alt - d : yabai -m window --resize right:-20:0
shift + alt - s : yabai -m window --resize left:20:0
shift + alt - w : yabai -m window --resize top:0:-20
shift + alt - c : yabai -m window --resize bottom:0:20
shift + alt - x : yabai -m window --resize top:0:20
shift + alt - e : yabai -m window --resize bottom:0:-20

# set insertion point in focused container (idk what this does, please tell me @OGProgrammer)
# ctrl + alt - h : yabai -m window --insert west

# toggle window split type
hyper - q : yabai -m window --toggle split

# float / unfloat window and center on screen
hyper - b : yabai -m window --toggle float;\
           yabai -m window --grid 4:4:1:1:2:2

# toggle sticky(+float), topmost, picture-in-picture (I need to better understand these types like pip)
#hyper - p : yabai -m window --toggle sticky;\
#           yabai -m window --toggle topmost;\
#           yabai -m window --toggle pip

#create a stack
hyper - 0x2A : window=$(yabai -m query --windows --window | jq -r '.id') && yabai -m window east --stack $window || (yabai -m window $window --toggle float && yabai -m window $window --toggle float)
hyper - 0x1E : window=$(yabai -m query --windows --window | jq -r '.id') && yabai -m window west --stack $window || (yabai -m window $window --toggle float && yabai -m window $window --toggle float)
hyper - 0x21 : window=$(yabai -m query --windows --window | jq -r '.id') && yabai -m window north --stack $window || (yabai -m window $window --toggle float && yabai -m window $window --toggle float)
hyper - 0x27 : window=$(yabai -m query --windows --window | jq -r '.id') && yabai -m window east --stack $window || (yabai -m window $window --toggle float && yabai -m window $window --toggle float)

# Focus window up/down in stack
hyper - 0x18 : yabai -m window --focus stack.next
hyper - 0x1B : yabai -m window --focus stack.prev

# Toggle foucus on a stack
hyper - return : yabai -m window --focus stack.next || yabai -m window --focus stack.first

# Add the active window  to the window or stack to the {direction}
# Note that this only works when the active window does *not* already belong to a stack
hyper - left  : yabai -m window west --stack $(yabai -m query --windows --window | jq -r '.id')
hyper - down  : yabai -m window south --stack $(yabai -m query --windows --window | jq -r '.id')
hyper - up    : yabai -m window north --stack $(yabai -m query --windows --window | jq -r '.id')
hyper - right : yabai -m window east --stack $(yabai -m query --windows --window | jq -r '.id')

# Unstack apps
hyper - t : yabai -m space --layout $( [ "$(yabai -m query --spaces --space | jq -re .type)" = 'bsp' ] && echo 'stack' || echo 'bsp' )

